# This buildmaster config file is for building the Didj LightningCore.
# Note that buildbot has been updated with the svn-passwd.patch at:
#    http://buildbot.net/trac/attachment/ticket/41/buildbot-svn-passwd.patch
# so that svn accepts a username and password, dangerous as this information
# is placed in the buildbot log files, but needed to automate the build
# process.

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

# These are the parameters to change when creating a new buildmaster for a new project.
SLAVE_PORTNUMBER = 9991
HTTP_PORTNUMBER = 8011
PROJECT_NAME = "Brio2"
PROJECT_URL = "http://emma.leapfrog.com/display/BRIO/Brio+OS+Home"
SVN_URL = "http://source.leapfrog.com/Software/Brio/Brio2/TRUNK/"
SVN_USER="build_ro"
SVN_PASSWD="tad_6401"

FULL_BUILDER_NAME = "Brio-Full"
UPDATE_BUILDER_NAME = "Brio-Update"

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
config = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
config['slaves'] = [BuildSlave("briofullslave","briofullslave"), BuildSlave("brioupdateslave","brioupdateslave")]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
config['slavePortnum'] = SLAVE_PORTNUMBER

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.
from buildbot.changes.pb import PBChangeSource
config['change_source'] = PBChangeSource()



####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler
config['schedulers'] = []
config['schedulers'].append(Scheduler(name="all", branch=None,
                                 treeStableTimer=2*60,
                                 builderNames=["buildbot-full"]))


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in config['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

import os.path
from buildbot.process import factory
from buildbot.steps import source,shell
from buildbot.steps.shell import Compile
from buildbot.steps.python_twisted import Trial
from buildbot.changes.svnpoller import SVNPoller


svn_poller = SVNPoller(
		svnurl=SVN_URL,
		svnuser=SVN_USER,
		svnpasswd=SVN_PASSWD,
		pollinterval = 5 * 60, # seconds
		histmax=10,
		svnbin='/usr/bin/svn'
		)

config['change_source']= [ svn_poller ]


# When to run builds
from buildbot import scheduler
daily = scheduler.Nightly(name='daily',
		          builderNames=[FULL_BUILDER_NAME],
			  hour=11,
			  minute=15)
code_changed = scheduler.Scheduler(name="code_changed", branch=None,
				treeStableTimer=2*60, # seconds
				builderNames=[UPDATE_BUILDER_NAME])
config['schedulers'] = [ daily, code_changed ]


# How to build the software

# LightningCore full build
f3 = factory.BuildFactory()
f3.addStep(source.SVN, svnurl=SVN_URL, username=SVN_USER, password=SVN_PASSWD, mode='clobber')
f3.addStep(shell.ShellCommand, command=['scons', 'type=embedded', 'debug=f'], env={'ROOTFS_PATH': '/home/briofullslave/nfsroot'})

# LightningCore update build
f4 = factory.BuildFactory()
f4.addStep(source.SVN, svnurl=SVN_URL, username=SVN_USER, password=SVN_PASSWD, mode='update')
f4.addStep(shell.ShellCommand, command=['scons', 'type=embedded', 'debug=f'], env={'ROOTFS_PATH': '/home/brioupdateslave/nfsroot'})

b3 = {'name': FULL_BUILDER_NAME,
	'slavename': 'briofullslave',
	'builddir': 'briofull',
	'factory': f3,
	}
b4 = {'name': UPDATE_BUILDER_NAME,
	'slavename': 'brioupdateslave',
	'builddir': 'brioupdate',
	'factory': f4,
	}

config['builders'] = [b3,b4]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

config['status'] = []

from buildbot.status import html
waterfall = html.Waterfall(allowForce=True, http_port=HTTP_PORTNUMBER)
config['status'].append(waterfall)


from buildbot.status import mail
config['status'].append(mail.MailNotifier(fromaddr="briobuildmaster@emplhwbuild01.leapfrog.com",
					  mode='failing',
					  addLogs=True,
					  subject='%(builder)s BUILD FAILED',
                                          extraRecipients=["dlazzari@leapfrog.com",
						           "dmilici@leapfrog.com","sesters@leapfrog.com",
							   "gstanfield@leapfrog.com","mdeshpande@leapfrog.com"],
                                          sendToInterestedUsers=True))

config['status'].append(mail.MailNotifier(fromaddr="briobuildmaster@emplhwbuild01.leapfrog.com",
					  mode='all',
					  addLogs=False,
					  subject='%(builder)s BUILD STATUS',
                                          extraRecipients=["dlazzari@leapfrog.com",
							    "dmilici@leapfrog.com","sesters@leapfrog.com",
							    "gstanfield@leapfrog.com","mdeshpande@leapfrog.com"],
                                          sendToInterestedUsers=True))
#
# from buildbot.status import words
# config['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# config['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

config['debugPassword'] = "debugpassword"


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

config['projectName'] = PROJECT_NAME
config['projectURL'] = PROJECT_URL

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

config['buildbotURL'] = "http://emplhwbuild01.leapfrog.com:%s/" % str(HTTP_PORTNUMBER)

