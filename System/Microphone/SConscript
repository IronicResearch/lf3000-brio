import os.path
#-----------------------------------------------------------------------------
# Brio/System/Microphone
#-----------------------------------------------------------------------------
from Etc.Tools.SConsTools.Priv.LfUtils import *
Import('env')

module_name	= 'Microphone'
mpi_name	= module_name + 'MPI'

#-----------------------------------------------------------------------------
# Setup module source files and libraries
#-----------------------------------------------------------------------------
modsrcs		= Glob('*.cpp')
mpisrcs		= Glob(os.path.join('PublicMPI', '*.cpp'))
modlibs		= ['Utility', 'AudioMPI', 'DisplayMPI', 'EventMPI', 'KernelMPI',
					 'DebugMPI', 'USBDeviceMPI', 'asound', 'sndfile',
					 'avformat', 'avcodec', 'avutil', 'png', 'z']
mpilibs		= ['ModuleMPI']

#-----------------------------------------------------------------------------
# Modify the build environment and build the module
#-----------------------------------------------------------------------------
myenv		= env.Clone()

myenv.Append(CPPPATH = ['#ThirdParty/LibSndFile/Include'])
myenv.Append(CPPPATH = ['#ThirdParty/LibAVFormat/Include'])

myenv.Append(LIBPATH = ['#ThirdParty/LibSndFile/Libs/' + env['cpu']])
myenv.Append(LIBPATH = ['#ThirdParty/LibAVFormat/Libs/' + env['cpu']])

myenv.Append(LIBPATH = [env['staging_dir'].Dir('usr').Dir('lib')])

myenv.Append(CPPPATH=['Include'])
mymodule	= MakeMyModule(myenv, module_name, modsrcs, modlibs, kBuildModule)
mympi		= MakeMyModule(myenv, mpi_name, mpisrcs, mpilibs, kBuildMPI)
Depends(mympi, mymodule)

targets = mympi or []

#-----------------------------------------------------------------------------
# Modify the build environment and build and run the unit tests
#-----------------------------------------------------------------------------
if env['buildtests']:
	extra_libs = ['DisplayMPI', 'EventMPI', 'AudioMPI', 'KernelMPI', 'VideoMPI', 'USBDeviceMPI', 'ButtonMPI']
	targets.append(RunMyTests(module_name, [], mpilibs + extra_libs, myenv))

Return('targets')
