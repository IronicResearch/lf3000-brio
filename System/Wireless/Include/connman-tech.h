
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__connman_tech_h__PROXY_MARSHAL_H
#define __dbusxx__connman_tech_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace net {
namespace connman {

class Technology_proxy
: public ::DBus::InterfaceProxy
{
public:

    Technology_proxy()
    : ::DBus::InterfaceProxy("net.connman.Technology")
    {
        
    }

public:

    /* properties exported by this interface */
public:
    void EnableSignals()
    {
    	connect_signal(Technology_proxy, PropertyChanged, _PropertyChanged_stub);
    }

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::map< std::string, ::DBus::Variant > GetProperties()
    {
        ::DBus::CallMessage call;
        call.member("GetProperties");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< std::string, ::DBus::Variant > argout;
        ri >> argout;
        return argout;
    }

    void SetProperty(const std::string& argin0, const ::DBus::Variant& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("SetProperty");
        ::DBus::Message ret = invoke_method (call);
    }

    void Scan()
    {
        ::DBus::CallMessage call;
        call.member("Scan");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void PropertyChanged(const std::string& argin0, const ::DBus::Variant& argin1) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _PropertyChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string arg0;
        ri >> arg0;
        ::DBus::Variant arg1;
        ri >> arg1;
        PropertyChanged(arg0, arg1);
    }
};

class Technology :
	public Technology_proxy,
	public DBus::ObjectProxy
{
public:
	Technology(DBus::Connection& conn, DBus::Path path) :
		DBus::ObjectProxy(conn, path, "net.connman")
	{}
	
	void PropertyChanged(const std::string& argin0, const ::DBus::Variant& argin1)
	{}
};

} } 
#endif //__dbusxx__connman_tech_h__PROXY_MARSHAL_H
