
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__wpa_supplicant_interface_h__PROXY_MARSHAL_H
#define __dbusxx__wpa_supplicant_interface_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace fi {
namespace w1 {
namespace wpa_supplicant1 {

class Interface_proxy
: public ::DBus::InterfaceProxy
{
public:

    Interface_proxy()
    : ::DBus::InterfaceProxy("fi.w1.wpa_supplicant1.Interface")
    {
        
    }

public:

    /* properties exported by this interface */
        const std::map< std::string, ::DBus::Variant > Capabilities() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "fi.w1.wpa_supplicant1.Interface";
            const std::string property_name  = "Capabilities";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        const std::string State() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "fi.w1.wpa_supplicant1.Interface";
            const std::string property_name  = "State";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        const bool Scanning() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "fi.w1.wpa_supplicant1.Interface";
            const std::string property_name  = "Scanning";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        const uint32_t ApScan() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "fi.w1.wpa_supplicant1.Interface";
            const std::string property_name  = "ApScan";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        void ApScan( const uint32_t & input) {
            ::DBus::CallMessage call ;
             call.member("Set");  call.interface( "org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            ::DBus::Variant value;
            ::DBus::MessageIter vi = value.writer ();
            vi << input;
            const std::string interface_name = "fi.w1.wpa_supplicant1.Interface";
            const std::string property_name  = "ApScan";
            wi << interface_name;
            wi << property_name;
            wi << value;
            ::DBus::Message ret = this->invoke_method (call);
        };
        const std::string Ifname() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "fi.w1.wpa_supplicant1.Interface";
            const std::string property_name  = "Ifname";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        const std::string Driver() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "fi.w1.wpa_supplicant1.Interface";
            const std::string property_name  = "Driver";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        const std::string BridgeIfname() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "fi.w1.wpa_supplicant1.Interface";
            const std::string property_name  = "BridgeIfname";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        const ::DBus::Path CurrentBSS() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "fi.w1.wpa_supplicant1.Interface";
            const std::string property_name  = "CurrentBSS";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        const ::DBus::Path CurrentNetwork() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "fi.w1.wpa_supplicant1.Interface";
            const std::string property_name  = "CurrentNetwork";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        const std::map< std::string, std::vector< uint8_t > > Blobs() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "fi.w1.wpa_supplicant1.Interface";
            const std::string property_name  = "Blobs";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        const std::vector< ::DBus::Path > BSSs() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "fi.w1.wpa_supplicant1.Interface";
            const std::string property_name  = "BSSs";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        const std::vector< ::DBus::Path > Networks() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "fi.w1.wpa_supplicant1.Interface";
            const std::string property_name  = "Networks";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
public:

    void EnableSignals()
    {
    	connect_signal(Interface_proxy, ScanDone, _ScanDone_stub);
        connect_signal(Interface_proxy, BSSAdded, _BSSAdded_stub);
        connect_signal(Interface_proxy, BSSRemoved, _BSSRemoved_stub);
        connect_signal(Interface_proxy, BlobAdded, _BlobAdded_stub);
        connect_signal(Interface_proxy, BlobRemoved, _BlobRemoved_stub);
        connect_signal(Interface_proxy, NetworkAdded, _NetworkAdded_stub);
        connect_signal(Interface_proxy, NetworkRemoved, _NetworkRemoved_stub);
        connect_signal(Interface_proxy, NetworkSelected, _NetworkSelected_stub);
        connect_signal(Interface_proxy, PropertiesChanged, _PropertiesChanged_stub);
    }

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Scan(const std::map< std::string, ::DBus::Variant >& args)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << args;
        call.member("Scan");
        ::DBus::Message ret = invoke_method (call);
    }

    void Disconnect()
    {
        ::DBus::CallMessage call;
        call.member("Disconnect");
        ::DBus::Message ret = invoke_method (call);
    }

    ::DBus::Path AddNetwork(const std::map< std::string, ::DBus::Variant >& args)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << args;
        call.member("AddNetwork");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    void RemoveNetwork(const ::DBus::Path& path)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << path;
        call.member("RemoveNetwork");
        ::DBus::Message ret = invoke_method (call);
    }

    void SelectNetwork(const ::DBus::Path& path)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << path;
        call.member("SelectNetwork");
        ::DBus::Message ret = invoke_method (call);
    }

    void AddBlob(const std::string& name, const std::vector< uint8_t >& data)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << data;
        call.member("AddBlob");
        ::DBus::Message ret = invoke_method (call);
    }

    std::vector< uint8_t > GetBlob(const std::string& name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        call.member("GetBlob");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    void RemoveBlob(const std::string& name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        call.member("RemoveBlob");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void ScanDone(const bool& success) = 0;
    virtual void BSSAdded(const ::DBus::Path& path, const std::map< std::string, ::DBus::Variant >& properties) = 0;
    virtual void BSSRemoved(const ::DBus::Path& path) = 0;
    virtual void BlobAdded(const std::string& name) = 0;
    virtual void BlobRemoved(const std::string& name) = 0;
    virtual void NetworkAdded(const ::DBus::Path& path, const std::map< std::string, ::DBus::Variant >& properties) = 0;
    virtual void NetworkRemoved(const ::DBus::Path& path) = 0;
    virtual void NetworkSelected(const ::DBus::Path& path) = 0;
    virtual void PropertiesChanged(const std::map< std::string, ::DBus::Variant >& properties) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _ScanDone_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool success;
        ri >> success;
        ScanDone(success);
    }
    void _BSSAdded_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Path path;
        ri >> path;
        std::map< std::string, ::DBus::Variant > properties;
        ri >> properties;
        BSSAdded(path, properties);
    }
    void _BSSRemoved_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Path path;
        ri >> path;
        BSSRemoved(path);
    }
    void _BlobAdded_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string name;
        ri >> name;
        BlobAdded(name);
    }
    void _BlobRemoved_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string name;
        ri >> name;
        BlobRemoved(name);
    }
    void _NetworkAdded_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Path path;
        ri >> path;
        std::map< std::string, ::DBus::Variant > properties;
        ri >> properties;
        NetworkAdded(path, properties);
    }
    void _NetworkRemoved_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Path path;
        ri >> path;
        NetworkRemoved(path);
    }
    void _NetworkSelected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Path path;
        ri >> path;
        NetworkSelected(path);
    }
    void _PropertiesChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::map< std::string, ::DBus::Variant > properties;
        ri >> properties;
        PropertiesChanged(properties);
    }
};

class Interface :
	public Interface_proxy,
	public DBus::ObjectProxy
{
	public:
		Interface(DBus::Connection &connection, DBus::Path path) :
			DBus::ObjectProxy(connection, path, "fi.w1.wpa_supplicant1")
		{}
		
		virtual void ScanDone(const bool& success)
		{}
		
		virtual void BSSAdded(const ::DBus::Path& path, const std::map< std::string, ::DBus::Variant >& properties)
		{}
		
		virtual void BSSRemoved(const ::DBus::Path& path)
		{}
		
		virtual void BlobAdded(const std::string& name)
		{}
		
		virtual void BlobRemoved(const std::string& name)
		{}
		
		virtual void NetworkAdded(const ::DBus::Path& path, const std::map< std::string, ::DBus::Variant >& properties)
		{}
		
		virtual void NetworkRemoved(const ::DBus::Path& path)
		{}
		
		virtual void NetworkSelected(const ::DBus::Path& path)
		{}
		
		//The implementation of the below has been moved to Wireless.cpp
		virtual void PropertiesChanged(const std::map< std::string, ::DBus::Variant >& properties);
	
	private:
		LeapFrog::Brio::CEventMPI mEvent;
};

} } } 
#endif //__dbusxx__wpa_supplicant_interface_h__PROXY_MARSHAL_H
