
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__avahi_server_h__PROXY_MARSHAL_H
#define __dbusxx__avahi_server_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace freedesktop {
namespace Avahi {

class Server_proxy
: public ::DBus::InterfaceProxy
{
public:

    Server_proxy()
    : ::DBus::InterfaceProxy("org.freedesktop.Avahi.Server")
    {
        
    }

public:

    /* properties exported by this interface */
public:
    void EnableSignals()
    {
    	connect_signal(Server_proxy, StateChanged, _StateChanged_stub);
    }
    
    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::string GetVersionString()
    {
        ::DBus::CallMessage call;
        call.member("GetVersionString");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    uint32_t GetAPIVersion()
    {
        ::DBus::CallMessage call;
        call.member("GetAPIVersion");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    std::string GetHostName()
    {
        ::DBus::CallMessage call;
        call.member("GetHostName");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    void SetHostName(const std::string& name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        call.member("SetHostName");
        ::DBus::Message ret = invoke_method (call);
    }

    std::string GetHostNameFqdn()
    {
        ::DBus::CallMessage call;
        call.member("GetHostNameFqdn");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::string GetDomainName()
    {
        ::DBus::CallMessage call;
        call.member("GetDomainName");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    bool IsNSSSupportAvailable()
    {
        ::DBus::CallMessage call;
        call.member("IsNSSSupportAvailable");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        bool argout;
        ri >> argout;
        return argout;
    }

    int32_t GetState()
    {
        ::DBus::CallMessage call;
        call.member("GetState");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t GetLocalServiceCookie()
    {
        ::DBus::CallMessage call;
        call.member("GetLocalServiceCookie");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    std::string GetAlternativeHostName(const std::string& name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        call.member("GetAlternativeHostName");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::string GetAlternativeServiceName(const std::string& name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        call.member("GetAlternativeServiceName");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::string GetNetworkInterfaceNameByIndex(const int32_t& index)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << index;
        call.member("GetNetworkInterfaceNameByIndex");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    int32_t GetNetworkInterfaceIndexByName(const std::string& name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        call.member("GetNetworkInterfaceIndexByName");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void ResolveHostName(const int32_t& interface, const int32_t& protocol, const std::string& name, const int32_t& aprotocol, const uint32_t& flags, int32_t& interface_out, int32_t& protocol_out, std::string& name_out, int32_t& aprotocol_out, std::string& address_out, uint32_t& flags_out)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << interface;
        wi << protocol;
        wi << name;
        wi << aprotocol;
        wi << flags;
        call.member("ResolveHostName");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> interface_out;
        ri >> protocol_out;
        ri >> name_out;
        ri >> aprotocol_out;
        ri >> address_out;
        ri >> flags_out;
    }

    void ResolveAddress(const int32_t& interface, const int32_t& protocol, const std::string& address, const uint32_t& flags, int32_t& interface_out, int32_t& protocol_out, int32_t& aprotocol_out, std::string& address_out, std::string& name_out, uint32_t& flags_out)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << interface;
        wi << protocol;
        wi << address;
        wi << flags;
        call.member("ResolveAddress");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> interface_out;
        ri >> protocol_out;
        ri >> aprotocol_out;
        ri >> address_out;
        ri >> name_out;
        ri >> flags_out;
    }

    void ResolveService(const int32_t& interface, const int32_t& protocol, const std::string& name, const std::string& type, const std::string& domain, const int32_t& aprotocol, const uint32_t& flags, int32_t& interface_out, int32_t& protocol_out, std::string& name_out, std::string& type_out, std::string& domain_out, std::string& host_out, int32_t& aprotocol_out, std::string& address_out, uint16_t& port_out, std::vector< std::vector< uint8_t > >& txt_out, uint32_t& flags_out)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << interface;
        wi << protocol;
        wi << name;
        wi << type;
        wi << domain;
        wi << aprotocol;
        wi << flags;
        call.member("ResolveService");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> interface_out;
        ri >> protocol_out;
        ri >> name_out;
        ri >> type_out;
        ri >> domain_out;
        ri >> host_out;
        ri >> aprotocol_out;
        ri >> address_out;
        ri >> port_out;
        ri >> txt_out;
        ri >> flags_out;
    }

    ::DBus::Path EntryGroupNew()
    {
        ::DBus::CallMessage call;
        call.member("EntryGroupNew");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path DomainBrowserNew(const int32_t& interface, const int32_t& protocol, const std::string& domain, const int32_t& btype, const uint32_t& flags)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << interface;
        wi << protocol;
        wi << domain;
        wi << btype;
        wi << flags;
        call.member("DomainBrowserNew");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path ServiceTypeBrowserNew(const int32_t& interface, const int32_t& protocol, const std::string& domain, const uint32_t& flags)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << interface;
        wi << protocol;
        wi << domain;
        wi << flags;
        call.member("ServiceTypeBrowserNew");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path ServiceBrowserNew(const int32_t& interface, const int32_t& protocol, const std::string& type, const std::string& domain, const uint32_t& flags)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << interface;
        wi << protocol;
        wi << type;
        wi << domain;
        wi << flags;
        call.member("ServiceBrowserNew");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path ServiceResolverNew(const int32_t& interface, const int32_t& protocol, const std::string& name, const std::string& type, const std::string& domain, const int32_t& aprotocol, const uint32_t& flags)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << interface;
        wi << protocol;
        wi << name;
        wi << type;
        wi << domain;
        wi << aprotocol;
        wi << flags;
        call.member("ServiceResolverNew");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path HostNameResolverNew(const int32_t& interface, const int32_t& protocol, const std::string& name, const int32_t& aprotocol, const uint32_t& flags)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << interface;
        wi << protocol;
        wi << name;
        wi << aprotocol;
        wi << flags;
        call.member("HostNameResolverNew");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path AddressResolverNew(const int32_t& interface, const int32_t& protocol, const std::string& address, const uint32_t& flags)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << interface;
        wi << protocol;
        wi << address;
        wi << flags;
        call.member("AddressResolverNew");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path RecordBrowserNew(const int32_t& interface, const int32_t& protocol, const std::string& name, const uint16_t& clazz, const uint16_t& type, const uint32_t& flags)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << interface;
        wi << protocol;
        wi << name;
        wi << clazz;
        wi << type;
        wi << flags;
        call.member("RecordBrowserNew");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void StateChanged(const int32_t& state, const std::string& error) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _StateChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t state;
        ri >> state;
        std::string error;
        ri >> error;
        StateChanged(state, error);
    }
};

class Server :
	public Server_proxy,
	public DBus::ObjectProxy
{
	public:
		Server(DBus::Connection &connection);
		
		void StateChanged(const int32_t& state, const std::string& error);
};

} } } 
#endif //__dbusxx__avahi_server_h__PROXY_MARSHAL_H
