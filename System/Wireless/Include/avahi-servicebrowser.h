
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__avahi_servicebrowser_h__PROXY_MARSHAL_H
#define __dbusxx__avahi_servicebrowser_h__PROXY_MARSHAL_H

#include <DebugMPI.h>
#include <EventMPI.h>
#include <ThreadCommQueue.h>

#include <dbus-c++/dbus.h>
#include <cassert>
#include <arpa/inet.h>

namespace org {
namespace freedesktop {
namespace Avahi {

class ServiceBrowser_proxy
: public ::DBus::InterfaceProxy
{
public:

    ServiceBrowser_proxy()
    : ::DBus::InterfaceProxy("org.freedesktop.Avahi.ServiceBrowser")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Free()
    {
        ::DBus::CallMessage call;
        call.member("Free");
        ::DBus::Message ret = invoke_method (call);
    }
    
    void EnableSignals()
    {
    	connect_signal(ServiceBrowser_proxy, ItemNew, _ItemNew_stub);
        connect_signal(ServiceBrowser_proxy, ItemRemove, _ItemRemove_stub);
        connect_signal(ServiceBrowser_proxy, Failure, _Failure_stub);
        connect_signal(ServiceBrowser_proxy, AllForNow, _AllForNow_stub);
        connect_signal(ServiceBrowser_proxy, CacheExhausted, _CacheExhausted_stub);
    }

public:

    /* signal handlers for this interface
     */
    virtual void ItemNew(const int32_t& interface, const int32_t& protocol, const std::string& name, const std::string& type, const std::string& domain, const uint32_t& flags) = 0;
    virtual void ItemRemove(const int32_t& interface, const int32_t& protocol, const std::string& name, const std::string& type, const std::string& domain, const uint32_t& flags) = 0;
    virtual void Failure(const std::string& error) = 0;
    virtual void AllForNow() = 0;
    virtual void CacheExhausted() = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _ItemNew_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t interface;
        ri >> interface;
        int32_t protocol;
        ri >> protocol;
        std::string name;
        ri >> name;
        std::string type;
        ri >> type;
        std::string domain;
        ri >> domain;
        uint32_t flags;
        ri >> flags;
        ItemNew(interface, protocol, name, type, domain, flags);
    }
    void _ItemRemove_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t interface;
        ri >> interface;
        int32_t protocol;
        ri >> protocol;
        std::string name;
        ri >> name;
        std::string type;
        ri >> type;
        std::string domain;
        ri >> domain;
        uint32_t flags;
        ri >> flags;
        ItemRemove(interface, protocol, name, type, domain, flags);
    }
    void _Failure_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string error;
        ri >> error;
        Failure(error);
    }
    void _AllForNow_stub(const ::DBus::SignalMessage &sig)
    {
        AllForNow();
    }
    void _CacheExhausted_stub(const ::DBus::SignalMessage &sig)
    {
        CacheExhausted();
    }
};

struct Service
{
	int32_t interface;
	int32_t protocol;
	std::string name;
	std::string type;
	std::string domain;
	uint32_t flags;
};

/* Implemented in Avahi.cpp */
class ServiceBrowser :
	public ServiceBrowser_proxy,
	public DBus::ObjectProxy
{
	public:
		ServiceBrowser(DBus::Connection &connection,
		               DBus::Path path,
		               Server* server);
		
		virtual ~ServiceBrowser();
		
		void Start();
		
		void ItemNew(const int32_t& interface,
		             const int32_t& protocol,
		             const std::string& name,
		             const std::string& type,
		             const std::string& domain,
		             const uint32_t& flags);
		
		void ItemRemove(const int32_t& interface,
		                const int32_t& protocol,
		                const std::string& name,
		                const std::string& type,
		                const std::string& domain,
		                const uint32_t& flags);
		
		void Failure(const std::string& error);

		void AllForNow();
		
		void CacheExhausted();
		
		std::map<std::string, struct in_addr> GetResolvedServices();
		
	private:
		std::map<std::string, struct in_addr> mServiceLookup;
		Server* mServer; //Pointer to the server that spawned us
		
		LeapFrog::Brio::CDebugMPI mDebug;
		LeapFrog::Brio::CEventMPI mEvent;
		
		static void* ResolveServiceThread(void* browser_arg);
		pthread_t mResolveServiceThread;
		pthread_mutex_t mMapLock;
		ThreadCommQueue<Service> mResolutionQueue;
};

} } } 
#endif //__dbusxx__avahi_servicebrowser_h__PROXY_MARSHAL_H
