#-----------------------------------------------------------------------------
# Brio/System Repository
#-----------------------------------------------------------------------------
import os.path
import glob
Import('*')

#-----------------------------------------------------------------------------
# Create the folder name for a module's intermediate files
#-----------------------------------------------------------------------------
def MakeTempDirName(module):
	return os.path.join(vars['intermediate_build_dir'], module)
 

#-----------------------------------------------------------------------------
# Invoke individual module builders
#-----------------------------------------------------------------------------
#FIXME/tp: remove 'modules' variable (change to deplayment no longer requires it?)
modules = []
modules.append(SConscript('Audio/SConscript', build_dir=MakeTempDirName('Audio'), duplicate=0))
modules.append(SConscript('Button/SConscript', build_dir=MakeTempDirName('Button'), duplicate=0))
modules.append(SConscript('Debug/SConscript', build_dir=MakeTempDirName('Debug'), duplicate=0))
modules.append(SConscript('Display/SConscript', build_dir=MakeTempDirName('Display'), duplicate=0))
modules.append(SConscript('Event/SConscript', build_dir=MakeTempDirName('Event'), duplicate=0))
modules.append(SConscript('Font/SConscript', build_dir=MakeTempDirName('Font'), duplicate=0))
modules.append(SConscript('Kernel/SConscript', build_dir=MakeTempDirName('Kernel'), duplicate=0))
modules.append(SConscript('Module/SConscript', build_dir=MakeTempDirName('Module'), duplicate=0))
modules.append(SConscript('Resource/SConscript', build_dir=MakeTempDirName('Resource'), duplicate=0))
modules.append(SConscript('Video/SConscript', build_dir=MakeTempDirName('Video'), duplicate=0))
if vars['is_emulation']:
	modules.append(SConscript('Emulation/SConscript', build_dir=MakeTempDirName('Emulation'), duplicate=0))


#-----------------------------------------------------------------------------
# Populate the "XBuild" or "Publish" folder
#-----------------------------------------------------------------------------
if vars['is_export']:
	headers = glob.glob(os.path.join('Include', '*.h'))
	env.Install(vars['hdr_deploy_dir'], headers)
		