#-----------------------------------------------------------------------------
# Brio/System Repository
#-----------------------------------------------------------------------------
import os.path
Import('env')

#-----------------------------------------------------------------------------
# Create the folder name for a module's intermediate files
#-----------------------------------------------------------------------------
def MakeTempDirName(module):
	#~ return os.path.join(vars['intermediate_build_dir'], module)
	if env['intermediate_dir']:
		return env['intermediate_dir'].Dir(module).abspath
	else:
		return Dir('Temp').Dir(module).abspath

targets = []

#-----------------------------------------------------------------------------
# Invoke individual module builders
#-----------------------------------------------------------------------------
targets.extend(SConscript('Audio/SConscript', build_dir=MakeTempDirName('Audio'), duplicate=0))
targets.extend(SConscript('Button/SConscript', build_dir=MakeTempDirName('Button'), duplicate=0))
targets.extend(SConscript('Cartridge/SConscript', build_dir=MakeTempDirName('Cartridge'), duplicate=0))
targets.extend(SConscript('Camera/SConscript', build_dir=MakeTempDirName('Camera'), duplicate=0))
targets.extend(SConscript('Debug/SConscript', build_dir=MakeTempDirName('Debug'), duplicate=0))
targets.extend(SConscript('Display/SConscript', build_dir=MakeTempDirName('Display'), duplicate=0))
targets.extend(SConscript('Event/SConscript', build_dir=MakeTempDirName('Event'), duplicate=0))
targets.extend(SConscript('Font/SConscript', build_dir=MakeTempDirName('Font'), duplicate=0))
targets.extend(SConscript('ImageIO/SConscript', build_dir=MakeTempDirName('ImageIO'), duplicate=0))
targets.extend(SConscript('Kernel/SConscript', build_dir=MakeTempDirName('Kernel'), duplicate=0))
targets.extend(SConscript('Microphone/SConscript', build_dir=MakeTempDirName('Microphone'), duplicate=0))
targets.extend(SConscript('Module/SConscript', variant_dir=MakeTempDirName('Module'), duplicate=0))
targets.extend(SConscript('Power/SConscript', build_dir=MakeTempDirName('Power'), duplicate=0))
targets.extend(SConscript('Video/SConscript', build_dir=MakeTempDirName('Video'), duplicate=0))
targets.extend(SConscript('USBDevice/SConscript', build_dir=MakeTempDirName('USBDevice'), duplicate=0))
targets.extend(SConscript('Utility/SConscript', build_dir=MakeTempDirName('Utility'), duplicate=0))
targets.extend(SConscript('Accelerometer/SConscript', build_dir=MakeTempDirName('Accelerometer'), duplicate=0))
targets.extend(SConscript('Wireless/SConscript', variant_dir=MakeTempDirName('Wireless'), duplicate=0))
if env['cpu'] == 'x86':
	targets.extend(SConscript('Emulation/SConscript', build_dir=MakeTempDirName('Emulation'), duplicate=0))


#-----------------------------------------------------------------------------
# Populate the "XBuild" or "Publish" folder
#-----------------------------------------------------------------------------
if env['hdr_deploy_dir']:
	targets += env.Install(env['hdr_deploy_dir'].Dir('LF'), Glob(os.path.join('Include', '*.h')) )
	

Return('targets')
