#-----------------------------------------------------------------------------
# Brio/System Repository
#-----------------------------------------------------------------------------
import os.path
import glob
Import('*')

#-----------------------------------------------------------------------------
# Create the folder name for a module's intermediate files
#-----------------------------------------------------------------------------
def MakeTempDirName(module):
	return os.path.join(local_vars['intermediate_build_dir'], module)
 

#-----------------------------------------------------------------------------
# Invoke individual module builders
#-----------------------------------------------------------------------------
modules = []
modules.append(SConscript('Audio/SConscript', build_dir=MakeTempDirName('Audio'), duplicate=0))
modules.append(SConscript('Button/SConscript', build_dir=MakeTempDirName('Button'), duplicate=0))
modules.append(SConscript('Debug/SConscript', build_dir=MakeTempDirName('Debug'), duplicate=0))
modules.append(SConscript('Display/SConscript', build_dir=MakeTempDirName('Display'), duplicate=0))
modules.append(SConscript('Emulation/SConscript', build_dir=MakeTempDirName('Emulation'), duplicate=0))
modules.append(SConscript('Event/SConscript', build_dir=MakeTempDirName('Event'), duplicate=0))
modules.append(SConscript('Kernel/SConscript', build_dir=MakeTempDirName('Kernel'), duplicate=0))
modules.append(SConscript('Module/SConscript', build_dir=MakeTempDirName('Module'), duplicate=0))
modules.append(SConscript('Resource/SConscript', build_dir=MakeTempDirName('Resource'), duplicate=0))


#-----------------------------------------------------------------------------
# Populate the "Publish" folder for a public release
#-----------------------------------------------------------------------------
if local_vars['is_publish']:
	mod_dir = os.path.join(local_vars['publish_lib_dir'], 'Module')
	mpi_dir = os.path.join(local_vars['publish_lib_dir'], 'MPI')
	headers = glob.glob(os.path.join('Include', '*.h'))
	env.Install(local_vars['publish_inc_dir'], headers)
	for m in modules:
		env.Install(mod_dir, m[0])
		env.Install(mpi_dir, m[1])
