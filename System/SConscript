#-----------------------------------------------------------------------------
# Brio/System Repository
#-----------------------------------------------------------------------------
import os.path
import glob
Import('*')

#-----------------------------------------------------------------------------
# Create the folder name for a module's intermediate files
#-----------------------------------------------------------------------------
def MakeTempDirName(module):
	return os.path.join(vars['intermediate_build_dir'], module)
 

#-----------------------------------------------------------------------------
# Invoke individual module builders
#-----------------------------------------------------------------------------
SConscript('Audio/SConscript', build_dir=MakeTempDirName('Audio'), duplicate=0)
SConscript('Button/SConscript', build_dir=MakeTempDirName('Button'), duplicate=0)
SConscript('Debug/SConscript', build_dir=MakeTempDirName('Debug'), duplicate=0)
SConscript('Display/SConscript', build_dir=MakeTempDirName('Display'), duplicate=0)
SConscript('Event/SConscript', build_dir=MakeTempDirName('Event'), duplicate=0)
SConscript('Font/SConscript', build_dir=MakeTempDirName('Font'), duplicate=0)
SConscript('Kernel/SConscript', build_dir=MakeTempDirName('Kernel'), duplicate=0)
SConscript('Module/SConscript', build_dir=MakeTempDirName('Module'), duplicate=0)
SConscript('Power/SConscript', build_dir=MakeTempDirName('Power'), duplicate=0)
SConscript('Video/SConscript', build_dir=MakeTempDirName('Video'), duplicate=0)
SConscript('USBDevice/SConscript', build_dir=MakeTempDirName('USBDevice'), duplicate=0)
SConscript('Utility/SConscript', build_dir=MakeTempDirName('Utility'), duplicate=0)
if vars['is_emulation']:
	SConscript('Emulation/SConscript', build_dir=MakeTempDirName('Emulation'), duplicate=0)


#-----------------------------------------------------------------------------
# Populate the "XBuild" or "Publish" folder
#-----------------------------------------------------------------------------
if vars['is_export']:
	headers = glob.glob(os.path.join('Include', '*.h'))
	env.Install(vars['hdr_deploy_dir'], headers)
	
	dest_dir = os.path.join(vars['export_root'], 'Tools')
	sf2brio = os.path.join('Audio', 'Utilities', 'sf2brio', vars['cpu_subdir'], 'sf2brio')
	env.Install(dest_dir, sf2brio)

#-----------------------------------------------------------------------------
# Export shared libs to embedded target
#-----------------------------------------------------------------------------
if not vars['is_emulation']:
	libs = glob.glob(os.path.join('Audio', 'DspUtil', vars['cpu_subdir'], 'libdsputil.so'))
	env.Install(vars['lib_deploy_dir'], libs)
	libs = glob.glob(os.path.join('Audio', 'LibSndFile', vars['cpu_subdir'], 'libsndfile.so'))
	env.Install(vars['lib_deploy_dir'], libs)


	
