#-----------------------------------------------------------------------------
# Brio/System/Module
#-----------------------------------------------------------------------------
from Etc.Tools.SConsTools.Priv.LfUtils import *
import glob
import os

Import('env')

module_name = 'Module'
mpi_name	= module_name + 'MPI'

#-----------------------------------------------------------------------------
# Setup module source files and libraries
#-----------------------------------------------------------------------------
emulib		= env['cpu'] == 'x86' and ['Emulation'] or ['ustring', 'iconv', 'intl', 'sigc-2.0']
modsrcs		= Glob('*.cpp')
mpisrcs		= Glob(os.path.join('PublicMPI', '*.cpp'))
modlibs		= emulib
mpilibs		= emulib
						
#-----------------------------------------------------------------------------
# Modify the build environment and build the module
#-----------------------------------------------------------------------------
myenv		= env.Clone()

myenv.Append(CPPPATH=['Include'])

if env['monolithic']:
	myenv.Append(CPPPATH = ['#System', 
							'#System/Audio/Include',
							'#ThirdParty/FreeType/Include',
							'#ThirdParty/FreeType/Include/freetype'])
mymodule	= MakeMyModule(myenv, module_name, modsrcs, modlibs, kBuildModule)
mympi		= MakeMyModule(myenv, mpi_name, mpisrcs, mpilibs, kBuildMPI)
Depends(mympi, mymodule)

targets = mympi or []

#-----------------------------------------------------------------------------
# Modify the build environment and build and run the unit tests
#-----------------------------------------------------------------------------
if env['buildtests']:
	targets.append(RunMyTests(module_name, [], mpilibs, myenv))

Return('targets')