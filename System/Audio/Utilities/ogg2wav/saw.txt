// **********************************************************************
// SawtoothOscillator_S16:    Generate band-unlimited sawtooth wave
//
//					Return value in range:	[-32768 .. 32767]
// **********************************************************************
    void 
SawtoothOscillator_S16(short *outP, long length, unsigned long *z, unsigned long delta)
// z		ptr to last state
// delta	counter increment
{
for (long i = 0; i < length; i++)
	{
	unsigned long z0 = *z;
	*z = z0 + delta;

// Convert to range [-32768..32767] 
	outP[i] = (short) (((long)z0)>>1);
	}
}	// ---- end SawtoothOscillator_S16() ----

#define TEST_SAW
#ifdef TEST_SAW
{
unsigned long z, delta;
short outBufS16[50];

#define k12_2To31m1		((double) 2147483647UL) // Add UL suffix to avoid compiler warnings
#define m2DoubleToULong(x)	(((unsigned long)(k12_2To31m1*(double)(x)))<<1)
delta = m2DoubleToULong(2000.0f/44100.0f);
z     = 0;

SawtoothOscillator_S16(outBufS16, 50, &z, delta);
// Cut range from [-32768..32767] to [-16384..16383]
for (i = 0; i < 50; i++)
    outBufS16[i] >>= 1;
for (i = 0; i < 50; i++)
    printf("%3d, %d \n", i, outBufS16[i]);
exit(0);
}
#endif // TEST_SAW

