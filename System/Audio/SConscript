#-----------------------------------------------------------------------------
# Brio/System/Audio
#-----------------------------------------------------------------------------
from Etc.Tools.SConsTools.Priv.LfUtils import *

import os.path

Import('env')

module_name	= 'Audio'
mpi_name	= module_name + 'MPI'

#-----------------------------------------------------------------------------
# Setup module source files and libraries
#-----------------------------------------------------------------------------
modsrcs		= Glob('*.cpp')
mpisrcs		= Glob(os.path.join('PublicMPI', '*.cpp'))
modlibs		= ['KernelMPI', 'DebugMPI', 'EventMPI', 
				'pthread', 'vorbisidec', 'ogg', 'sndfile',
				'Utility', 'avcodec', 'avformat', 'avutil', 'asound']
mpilibs		= ['ModuleMPI', 'KernelMPI', 'DebugMPI']
						
#-----------------------------------------------------------------------------
# TODO: Tool to check packages installed for x86 emulation build
#-----------------------------------------------------------------------------
# sudo apt-get install libasound2-dev
# sudo apt-get install libsndfile1-dev
# sudo apt-get install libvorbis-dev
# sudo apt-get install libvorbisidec-dev
# sudo apt-get install libavcodec-dev
# sudo apt-get install libavformat-dev
# sudo apt-get install libavutil-dev
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Modify the build environment and build the module
#-----------------------------------------------------------------------------
myenv		= env.Clone()

#myenv.Append(CPPDEFINES = ['USE_VORBIS'])
myenv.Append(CPPDEFINES = ['USE_44KHZ'])
myenv.Append(CPPFLAGS = ['-Wno-deprecated-declarations'])

myenv.Append(CPPPATH = [os.path.join(myenv['staging_dir'].abspath, 'usr', 'include')])
myenv.Append(LIBPATH = [os.path.join(myenv['staging_dir'].abspath, 'usr', 'lib')])

myenv.Append(CPPPATH = ['#ThirdParty/LibAVFormat/Include'])
myenv.Append(LIBPATH = ['#ThirdParty/LibAVFormat/Libs/' + env['cpu']])

myenv.Append(CPPPATH=['Include'])

mymodule	= MakeMyModule(myenv, module_name, modsrcs, modlibs, kBuildModule)
mympi		= MakeMyModule(myenv, mpi_name, mpisrcs, mpilibs, kBuildMPI)
Depends(mympi, mymodule)

targets = mympi or []
 #-----------------------------------------------------------------------------
 # Modify the build environment and build and run the unit tests
 #-----------------------------------------------------------------------------
 #~ if not vars['is_publish']:
if env['buildtests']:
	targets.append(RunMyTests(module_name, [], mpilibs + ['EventMPI', 'Utility', 'ButtonMPI'], myenv))

Return('targets')
