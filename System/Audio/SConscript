#-----------------------------------------------------------------------------
# Brio/System/Audio
#-----------------------------------------------------------------------------
from Etc.Tools.SConsTools.Priv.LfUtils import *

import os.path
Import('*')

module_name	= 'Audio'
mpi_name	= module_name + 'MPI'

#-----------------------------------------------------------------------------
# Setup module source files and libraries
#-----------------------------------------------------------------------------
modsrcs		= FindModuleSources(Dir('.'), vars)
mpisrcs		= FindMPISources(Dir('.'), vars)
modlibs		= ['KernelMPI', 'DebugMPI', 'EventMPI', 'SystemResourceMPI', 
				'portaudio', 'me2000', 'vorbisidec']
mpilibs		= ['ModuleMPI', 'KernelMPI', 'DebugMPI']
						
#-----------------------------------------------------------------------------
# Modify the build environment and build the module
#-----------------------------------------------------------------------------
myenv		= env.Copy()

myenv.Append(CPPPATH = ['#ThirdParty/Portaudio/Include'])
myenv.Append(CPPPATH = ['#ThirdParty/Mobileer/Include'])
myenv.Append(CPPPATH = ['#ThirdParty/Theora/Include'])

if vars['is_emulation']:
	myenv.Append(LIBPATH = ['#ThirdParty/Portaudio/Libs/x86'])
	myenv.Append(LIBPATH = ['#ThirdParty/Mobileer/Libs/x86'])
	myenv.Append(LIBPATH = ['#ThirdParty/Theora/Libs/x86'])
	myenv.Append(RPATH   = myenv.Dir('#ThirdParty/Theora/Libs/x86').abspath)
else:
	myenv.Append(LIBPATH = ['#ThirdParty/Portaudio/Libs/arm'])
	myenv.Append(LIBPATH = ['#ThirdParty/Mobileer/Libs/arm'])
	myenv.Append(LIBPATH = ['#ThirdParty/Theora/Libs/arm'])

mymodule	= MakeMyModule(myenv, module_name, modsrcs, modlibs, kBuildModule, vars)
mympi		= MakeMyModule(myenv, mpi_name, mpisrcs, mpilibs, kBuildMPI, vars)
Depends(mympi, mymodule)

#-----------------------------------------------------------------------------
# Modify the build environment and build and run the unit tests
#-----------------------------------------------------------------------------
RunMyTests(module_name, [], mpilibs + ['EventMPI', 'ResourceMPI'], myenv, vars)

Return('mymodule', 'mympi')
