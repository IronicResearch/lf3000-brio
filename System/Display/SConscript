#-----------------------------------------------------------------------------
# Brio/System/Display
#-----------------------------------------------------------------------------
from Etc.Tools.SConsTools.Priv.LfUtils import *
import os

Import('env')

module_name	= 'Display'
mpi_name	= module_name + 'MPI'

#-----------------------------------------------------------------------------
# Setup module source files and libraries
#-----------------------------------------------------------------------------
if env['cpu'] == 'x86':
	emulibs		=  ['X11']
	ogllibs		=  ['EGL']
	modsrcs		=  Glob('*.cpp') + Glob( os.path.join('Emulation', '*.cpp') )
elif env['platform'] == 'LF2000':
	emulibs		= ['ustring', 'iconv', 'intl', 'sigc-2.0']
	ogllibs		= ['EGL', 'GLESv1_CM', 'GLESv2']
	modsrcs		= Glob('*.cpp') + Glob( os.path.join(env['platform'], '*.cpp') )
else:
	emulibs		= []
	ogllibs		= ['opengles_lite']
	modsrcs		= Glob('*.cpp') + Glob( os.path.join(env['platform'], '*.cpp') )

mpisrcs		= Glob( os.path.join('PublicMPI', '*.cpp') )
modlibs		= ['DebugMPI', 'KernelMPI', 'Utility'] + ogllibs + emulibs
mpilibs		= ['ModuleMPI', 'KernelMPI', 'DebugMPI', 'Utility'] + emulibs
						
#-----------------------------------------------------------------------------
# Modify the build environment and build the module
#-----------------------------------------------------------------------------
myenv		= env.Clone()
myenv.Append(CPPPATH=['Include'])
myenv.Append(LIBPATH=[ os.path.join('#', 'ThirdParty', 'ustring', 'libs', myenv['cpu']) ] )
if env['cpu'] == 'x86':
	myenv.Append(CPPPATH = ['#ThirdParty/MaliEmulator/include',
				'/usr/X11R6/include'])
	myenv.Append(LIBPATH = ['#ThirdParty/MaliEmulator/bin'])

elif env['platform'] == 'LF3000' and env['cpu_bare']:
	myenv.Append(CPPPATH = ['#ThirdParty/Nexell/Include'])
	myenv.Append(LIBPATH = ['#ThirdParty/Nexell/Libs/' + env['cpu']])
	myenv.Append(CPPDEFINES = ['EGL_EGLEXT_PROTOTYPES', 'GL_GLEXT_PROTOTYPES'])
	
elif env['platform'] == 'LF2000' and env['cpu_bare']:
	myenv.Append(CPPPATH = ['#ThirdParty/Nexell/Include'])
	myenv.Append(LIBPATH = ['#ThirdParty/Nexell/Libs/' + env['cpu']])
	myenv.Append(CPPDEFINES = ['EGL_EGLEXT_PROTOTYPES', 'GL_GLEXT_PROTOTYPES'])
elif env['platform'] == 'Lightning' and env['cpu_bare']:
	myenv.Append(CPPPATH = ['#ThirdParty/MagicEyes/Include'])
	myenv.Append(LIBPATH = ['#ThirdParty/MagicEyes/Libs/' + env['cpu_bare']])
						
mymodule	= MakeMyModule(myenv, module_name, modsrcs, modlibs, kBuildModule)
mympi		= MakeMyModule(myenv, mpi_name, mpisrcs, mpilibs, kBuildMPI)
Depends(mympi, mymodule)

targets = mympi or []
#-----------------------------------------------------------------------------
# Modify the build environment and build and run the unit tests
#-----------------------------------------------------------------------------
if env['cpu'] == 'x86':
	myenv.Append(RPATH   = myenv.Dir('#ThirdParty/PowerVR/Libs').abspath)

if env['buildtests']:
	if env['cpu'] != 'x86':
		targets.append(RunMyTests(module_name, [], mpilibs + ['DebugMPI', 'EventMPI', 'Utility', 'ButtonMPI'], myenv))
	else:
		print "WARNING: Display test disabled in emulation until fixed!"

Return('mymodule', 'mympi')
