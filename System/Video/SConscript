#-----------------------------------------------------------------------------
# Brio/System/Video
#-----------------------------------------------------------------------------
from Etc.Tools.SConsTools.Priv.LfUtils import *
import os
Import('env')

module_name	= 'Video'
mpi_name	= module_name + 'MPI'

#-----------------------------------------------------------------------------
# Setup module source files and libraries
#-----------------------------------------------------------------------------
modsrcs		= Glob('*.cpp')
mpisrcs		= Glob(os.path.join('PublicMPI', '*.cpp'))
modlibs		= ['AudioMPI', 'DisplayMPI', 'EventMPI', 'KernelMPI', 
					 'DebugMPI', 'ogg', 'theora', 
					 'avformat', 'avcodec', 'avutil']
mpilibs		= ['ModuleMPI']
						
#-----------------------------------------------------------------------------
# Modify the build environment and build the module
#-----------------------------------------------------------------------------
myenv		= env.Clone()
myenv.Append(CPPPATH = ['#System/Display/Include'])
myenv.Append(CPPPATH = ['#ThirdParty/Theora/Include'])
myenv.Append(LIBPATH = ['#ThirdParty/Theora/Libs/' + env['cpu']])

#nfsroot		= os.getenv('ROOTFS_PATH')
#myenv.Append(CPPPATH = [os.path.join(nfsroot, 'usr', 'local', 'include')])
#myenv.Append(LIBPATH = [os.path.join(nfsroot, 'usr', 'local', 'lib')])

myenv.Append(CPPPATH = ['#ThirdParty/LibAVFormat/Include'])
myenv.Append(LIBPATH = ['#ThirdParty/LibAVFormat/Libs/' + env['cpu']])
						
myenv.Append(CPPPATH=['Include'])
mymodule	= MakeMyModule(myenv, module_name, modsrcs, modlibs, kBuildModule)
mympi		= MakeMyModule(myenv, mpi_name, mpisrcs, mpilibs, kBuildMPI)
Depends(mympi, mymodule)

targets = mympi or []
#-----------------------------------------------------------------------------
# Modify the build environment and build and run the unit tests
#-----------------------------------------------------------------------------
if env['cpu'] == 'x86':
	myenv.Append(RPATH   = [myenv.Dir('#ThirdParty/Theora/Libs/x86').abspath, myenv.Dir('#ThirdParty/Portaudio/Libs/x86').abspath])
	myenv.Append(RPATH   = [myenv.Dir('#ThirdParty/LibAVFormat/Libs/x86').abspath])
if env['buildtests']:
	targets.append(RunMyTests(module_name, [], mpilibs +  ['DisplayMPI', 'EventMPI', 'AudioMPI', 'KernelMPI'], myenv))

Return('targets')
