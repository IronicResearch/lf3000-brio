#-----------------------------------------------------------------------------
# Brio/System/Video
#-----------------------------------------------------------------------------
from Etc.Tools.SConsTools.Priv.LfUtils import *
import os
Import('env')

module_name	= 'Video'
mpi_name	= module_name + 'MPI'

#-----------------------------------------------------------------------------
# Setup module source files and libraries
#-----------------------------------------------------------------------------
modsrcs		= Glob('*.cpp')
mpisrcs		= Glob(os.path.join('PublicMPI', '*.cpp'))
modlibs		= ['AudioMPI', 'DisplayMPI', 'EventMPI', 'KernelMPI', 
					 'DebugMPI', 'ogg', 'theora', 
					 'avformat', 'avcodec', 'avutil'] 
if (env['platform'] == 'LF2000' or env['platform'] == 'LF3000'):
	modlibs	+= ['gstreamer-0.10', 'glib-2.0', 'gobject-2.0', 'gstvideo-0.10']
mpilibs		= ['ModuleMPI']
						
#-----------------------------------------------------------------------------
# sudo apt-get install libtheora-dev
# sudo apt-get install libavcodec-dev
# sudo apt-get install libavformat-dev
# sudo apt-get install libavutil-dev
# sudo apt-get install libgstreamer0.10-dev
# sudo apt-get install libgstreamer-plugins-base0.10-dev
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Modify the build environment and build the module
#-----------------------------------------------------------------------------
myenv		= env.Clone()
myenv.Append(CPPFLAGS = ['-Wno-deprecated-declarations'])
myenv.Append(CPPFLAGS = ['-Wno-error=format'])
myenv.Append(CPPPATH = ['#System/Display/Include'])

if (env['platform'] == 'LF2000' or env['platform'] == 'LF3000'):
	myenv.Append(CPPDEFINES = ['USE_GSTREAMER=1'])
	myenv.Append(CPPDEFINES = ['HAVE_CONFIG_H', 'G_THREADS_MANDATORY', 'G_DISABLE_CAST_CHECKS', 'G_DISABLE_ASSERT'])
	myenv.Append(CPPPATH = [env['staging_dir'].Dir('usr').Dir('include').Dir('glib-2.0')])
	myenv.Append(CPPPATH = [env['staging_dir'].Dir('usr').Dir('include').Dir('gstreamer-0.10')])
	myenv.Append(CPPPATH = [env['staging_dir'].Dir('usr').Dir('include').Dir('libxml2')])

myenv.Append(CPPPATH = [env['staging_dir'].Dir('usr').Dir('include')])
myenv.Append(LIBPATH = [env['staging_dir'].Dir('usr').Dir('lib')])

#OpenGL emulation
if env['cpu'] == 'x86':
	myenv.Append(CPPPATH = ['#ThirdParty/MaliEmulator/include'])
	myenv.Append(LIBPATH = ['#ThirdParty/MaliEmulator/bin'])

if env['platform'] == 'LF2000' and env['cpu_bare']:
	myenv.Append(CPPPATH = ['#ThirdParty/Nexell/Include'])
	myenv.Append(CPPDEFINES = ['USE_ROTATOR=1'])
						
if env['platform'] == 'LF3000' and env['cpu_bare']:
	myenv.Append(CPPDEFINES = ['USE_VPU=1'])
	myenv.Append(CPPPATH = ['#ThirdParty/Nexell/Include/lf3000'])
	myenv.Append(LIBPATH = ['#ThirdParty/Nexell/Libs/' + env['cpu']])
	modlibs += ['nxvpu', 'nxvmem']
						
elif env['platform'] == 'Lightning' and env['cpu_bare']:
	myenv.Append(CPPPATH = ['#ThirdParty/MagicEyes/Include'])

myenv.Append(CPPPATH=['Include'])
mymodule	= MakeMyModule(myenv, module_name, modsrcs, modlibs, kBuildModule)
mympi		= MakeMyModule(myenv, mpi_name, mpisrcs, mpilibs, kBuildMPI)
Depends(mympi, mymodule)

targets = mympi or []
#-----------------------------------------------------------------------------
# Modify the build environment and build and run the unit tests
#-----------------------------------------------------------------------------
if env['buildtests']:
	if env['cpu'] != 'x86':
		targets.append(RunMyTests(module_name, [], mpilibs +  ['DisplayMPI', 'EventMPI', 'AudioMPI', 'KernelMPI'], myenv))
	else:
		print "WARNING: Video test disabled in emulation until fixed!"

Return('targets')
