#-----------------------------------------------------------------------------
# Brio/System/Camera
#-----------------------------------------------------------------------------
from Etc.Tools.SConsTools.Priv.LfUtils import *
import os.path

Import('env')

common_name		= 'Camera'
usb_module_name	= common_name + 'USB'
vip_module_name	= common_name + 'VIP'
mpi_name		= common_name + 'MPI'

#-----------------------------------------------------------------------------
# Setup module source files and libraries
#-----------------------------------------------------------------------------
modsrcs		= Glob('*.cpp') + ['Platform/CameraCommon.cpp']
usbmodsrcs	= ['Platform/CameraUSB.cpp']
vipmodsrcs	= ['Platform/CameraVIP.cpp']
mpisrcs		= Glob(os.path.join('PublicMPI', '*.cpp'))
modlibs		= ['Utility', 'AudioMPI', 'DisplayMPI', 'EventMPI', 'KernelMPI',
					 'DebugMPI', 'MicrophoneMPI', 'USBDeviceMPI', 'jpeg', 'asound', 'sndfile',
					 'avformat', 'avcodec', 'avutil', 'png', 'z']
mpilibs		= ['ModuleMPI', 'MicrophoneMPI']

#-----------------------------------------------------------------------------
# Modify the build environment and build the module
#-----------------------------------------------------------------------------
myenv		= env.Clone()

myenv.Append(CPPDEFINES = '__STDC_CONSTANT_MACROS')
myenv.Append(CPPPATH = ['#ThirdParty/LibJPEG/Include'])
myenv.Append(CPPPATH = ['#ThirdParty/LibSndFile/Include'])
myenv.Append(CPPPATH = ['#ThirdParty/LibAVFormat/Include'])

myenv.Append(LIBPATH = ['#ThirdParty/LibJPEG/Libs/' + env['cpu']])
myenv.Append(LIBPATH = ['#ThirdParty/LibSndFile/Libs/' + env['cpu']])
myenv.Append(LIBPATH = ['#ThirdParty/LibAVFormat/Libs/' + env['cpu']])

myenv.Append(LIBPATH = [env['staging_dir'].Dir('usr').Dir('lib')])

myenv.Append(CPPPATH=['Include'])
mymodule	= MakeMyModule(myenv, common_name, modsrcs, modlibs, kBuildMPI)
usbmodule	= MakeMyModule(myenv, usb_module_name, usbmodsrcs, modlibs + [common_name], kBuildModule)
vipmodule	= MakeMyModule(myenv, vip_module_name, vipmodsrcs, modlibs + [common_name], kBuildModule)
mympi		= MakeMyModule(myenv, mpi_name, mpisrcs, mpilibs, kBuildMPI)
Depends([usbmodule, vipmodule], mymodule)
Depends(mympi, [usbmodule, vipmodule])

targets = mympi or []

#-----------------------------------------------------------------------------
# Modify the build environment and build and run the unit tests
#-----------------------------------------------------------------------------
if env['buildtests']:
	extra_libs = ['DisplayMPI', 'EventMPI', 'AudioMPI', 'KernelMPI', 'VideoMPI','USBDeviceMPI', 'ButtonMPI', 'Utility']
	targets.append(RunMyTests(common_name, [], mpilibs + extra_libs, myenv))

Return('targets')
