#-----------------------------------------------------------------------------
# Brio/ThirdParty Repository
#-----------------------------------------------------------------------------
import os.path
import glob
Import('*')

copyenv = DefaultEnvironment()


#-----------------------------------------------------------------------------
# FIXME/tp: When we hide the ustring class behind our own implementation,
# the export glib stuff can go away.
#-----------------------------------------------------------------------------
def ExportHeaders(dest_dir, src_dir, file_extension):

	root_len = len(src_dir) + 1
		
	def callback(arg, directory, files):
		base = os.path.basename(directory)
		if base == '.svn':
			del files[:]
		else:
			for file in files:
				if os.path.splitext(file)[1] == file_extension:
					full = os.path.join(directory, file)
					subdir = os.path.dirname(full[root_len:])
					copyenv.Install(os.path.join(dest_dir, subdir), full)
						
	os.path.walk(src_dir, callback, None)
	Default(dest_dir)


#-----------------------------------------------------------------------------
# Populate the "XBuild" or "Publish" folders
#-----------------------------------------------------------------------------
if vars['is_export'] or vars['is_publish']:

	ExportHeaders(os.path.join(vars['hdr_deploy_dir'], 'boost'), 
					Dir('boost/boost').abspath, '.hpp')				
	ExportHeaders(os.path.join(vars['hdr_deploy_dir'], 'ThirdParty', 'ustring'), 
					Dir('ustring').abspath, '.h')
	ExportHeaders(os.path.join(vars['hdr_deploy_dir'], 'ThirdParty', 'freetype'), 
					Dir('FreeType/Include').abspath, '.h')
	ExportHeaders(os.path.join(vars['hdr_deploy_dir'], 'ThirdParty'), 
					Dir('LibJPEG/Include').abspath, '.h')
					
	if vars['is_emulation']:
		inc_dir = os.path.join(vars['hdr_deploy_dir'], 'OpenGL', vars['target_subdir'])
		lib_dir = os.path.join(vars['mpi_deploy_dir'], '..', 'OpenGL')
		headers = os.path.join('PowerVR', 'Include')
		Command(inc_dir, headers, Copy("$TARGET", "$SOURCE"))
		libs = glob.glob(os.path.join('PowerVR', 'Libs', '*.so*'))
		env.Install(lib_dir, libs)
		lib_dir = os.path.join(vars['mpi_deploy_dir'], '..', 'ThirdParty')
		libs = glob.glob(os.path.join('LibSndFile', 'Libs', vars['cpu_subdir'], '*.so*'))
		env.Install(lib_dir, libs)
		libs = glob.glob(os.path.join('Theora', 'Libs', vars['cpu_subdir'], '*.so*'))
		env.Install(lib_dir, libs)
		libs = glob.glob(os.path.join('FreeType', 'Libs', vars['cpu_subdir'], '*.so*'))
		env.Install(lib_dir, libs)
		libs = glob.glob(os.path.join('Portaudio', 'Libs', vars['cpu_subdir'], 'libportaudio.so'))
		env.Install(lib_dir, libs)
#		Flash includes its own libjpeg and fails to link with this one		
		libs = glob.glob(os.path.join('LibJPEG', 'Libs', vars['cpu_subdir'], '*.so*'))
		env.Install(lib_dir, libs)
		libs = glob.glob(os.path.join('LibAVFormat', 'Libs', vars['cpu_subdir'], '*.so*'))
		env.Install(lib_dir, libs)
	else:
		inc_dir = os.path.join(vars['hdr_deploy_dir'], 'OpenGL', vars['target_subdir'])
		lib_dir = os.path.join(vars['mpi_deploy_dir'], '..', 'OpenGL')
		headers = os.path.join('MagicEyes', 'Include')
		Command(inc_dir, headers, Copy("$TARGET", "$SOURCE"))
		if vars['variant'] == 'LF1000':
			core_name = 'libopengles_lite.so'
		else:
			core_name = 'libogl.a'
		lib = os.path.join('MagicEyes', 'Libs', vars['cpu_subdir'], core_name)
		env.Install(lib_dir, lib)
		# Need ustring libs for SDK apps linking platform libs
		libs = glob.glob(os.path.join('ustring', 'libs', vars['cpu_subdir'], '*.so'))
		env.Install(vars['mpi_deploy_dir'], libs)
		# Need FreeType headers (above) and libs for FlashLite fontconfig compilation
		libs = glob.glob(os.path.join('FreeType', 'Libs', vars['cpu_subdir'], '*.so'))
		env.Install(vars['mpi_deploy_dir'], libs)
		libs = glob.glob(os.path.join('LibJPEG', 'Libs', vars['cpu_subdir'], '*.so*'))
		env.Install(vars['mpi_deploy_dir'], libs)

#-----------------------------------------------------------------------------
# Export shared libs to embedded target
# Only specific versioned runtime libs copied to avoid duplication on target
#-----------------------------------------------------------------------------
if not vars['is_emulation']:
	libs = glob.glob(os.path.join('ustring', 'libs', vars['cpu_subdir'], 'libustring.so'))
	env.Install(vars['lib_deploy_dir'], libs)
	libs = glob.glob(os.path.join('ustring', 'libs', vars['cpu_subdir'], 'libiconv.so.2'))
	env.Install(vars['lib_deploy_dir'], libs)
	libs = glob.glob(os.path.join('ustring', 'libs', vars['cpu_subdir'], 'libintl.so.8'))
	env.Install(vars['lib_deploy_dir'], libs)
	libs = glob.glob(os.path.join('ustring', 'libs', vars['cpu_subdir'], 'libsigc-2.0.so.0'))
	env.Install(vars['lib_deploy_dir'], libs)
	libs = glob.glob(os.path.join('FreeType', 'Libs', vars['cpu_subdir'], 'libfreetype.so.6'))
	env.Install(vars['lib_deploy_dir'], libs)
	libs = glob.glob(os.path.join('LibSndFile', 'Libs', vars['cpu_subdir'], 'libsndfile.so.1'))
	env.Install(vars['lib_deploy_dir'], libs)
	libs = glob.glob(os.path.join('Theora', 'Libs', vars['cpu_subdir'], 'libogg.so.0'))
	env.Install(vars['lib_deploy_dir'], libs)
	libs = glob.glob(os.path.join('Theora', 'Libs', vars['cpu_subdir'], 'libtheora.so.0'))
	env.Install(vars['lib_deploy_dir'], libs)
	libs = glob.glob(os.path.join('Theora', 'Libs', vars['cpu_subdir'], 'libvorbisidec.so.1'))
	env.Install(vars['lib_deploy_dir'], libs)
	libs = glob.glob(os.path.join('MagicEyes', 'Libs', vars['cpu_subdir'], 'libopengles_lite.so'))
	env.Install(vars['lib_deploy_dir'], libs)
	libs = glob.glob(os.path.join('Portaudio', 'Libs', vars['cpu_subdir'], 'libportaudio.so'))
	env.Install(vars['lib_deploy_dir'], libs)
	libs = glob.glob(os.path.join('LibJPEG', 'Libs', vars['cpu_subdir'], 'libjpeg.so.8'))
	env.Install(vars['lib_deploy_dir'], libs)
	libs = glob.glob(os.path.join('LibAVFormat', 'Libs', vars['cpu_subdir'], 'libavcodec.so.52'))
	env.Install(vars['lib_deploy_dir'], libs)
	libs = glob.glob(os.path.join('LibAVFormat', 'Libs', vars['cpu_subdir'], 'libavdevice.so.52'))
	env.Install(vars['lib_deploy_dir'], libs)
	libs = glob.glob(os.path.join('LibAVFormat', 'Libs', vars['cpu_subdir'], 'libavformat.so.52'))
	env.Install(vars['lib_deploy_dir'], libs)
	libs = glob.glob(os.path.join('LibAVFormat', 'Libs', vars['cpu_subdir'], 'libavutil.so.49'))
	env.Install(vars['lib_deploy_dir'], libs)

#-----------------------------------------------------------------------------
# Export support modules to embedded or emulation target
#-----------------------------------------------------------------------------
	
