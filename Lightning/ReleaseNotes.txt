===========================================
Lightning C++ Development Kit Release Notes
===========================================
===========================================
v0.1.7  (Build XXXX, released June 15, 2007) 
===========================================
Release for embedded target. UString class; new Resource Manager

Enhancements:
-------------
* Ported the glib::ustring class to the embedded target.
* Changed PlayAudio() and PlayMIDIFile() to StartAudio() and StartMidiFile() 
  to be consistent with the rest of the API.
* Implemented Pause, Resume, and Stop for audio, midi, and the audio driver.
* Updated System/Include/ButtonTypes.h to include the full set of Lightning buttons.
* Updated emulation keyboard->button mappings per Colleen's request.
* Implemented the Kernel Module mutex and condition functions
* Replaced CKernelMPI::GetElapsedTime(usec*) with GetElapsedTimeAsMSecs()
  and GetElapsedTimeAsUSecs().
* Changed the Font Manager to use the Resource Manager rather than direct
  font files.
* Added functions to the Font Manager to return font metrics.
* In the resource manager, implemented the package interface functions
* In System/Include/ResourceTypes.h replaced unnamed enumerations with
  named enumerations.  Some types changed from tXXX to eXXX.
* For enumerations in ResourceTypes.h, changed kXXXTypeUndefined to kXXXTypeInvalid.
* For enumerations in ResourceTypes.h, added kXXXTypeAll to facilitate searches.
* In the Resource Manager, removed the redundant functions GetNumDevices() 
  and FindFirstDevice() in favor of using GetNumDevices(eDeviceType) and
  FindFirstDevice(eDeviceType) using the "kRsrcDeviceTypeAll" enumeration value.
  This is consistent with the GetNumPackages()/FindFirstPackage() call.
* In the Resource Manager, removed the redundant functions GetNumRsrcs() 
  and FindFirstRsrc() in favor of using GetNumRsrcs(tRsrcType) and 
  FindFirstRsrc(tRsrcType) with "kRsrcTypeAll".
* In the Resource Manager, changed all of the "GetRsrcXXX" accessors function 
  names to "GetXXX".
* In the Resource Manager, changed "XXXRsrcPackageXXX" to "XXXPackageXXX" 
  in member function names.
* In the Resource Manager, changed "XXXRsrcDeviceTypeXXX" to "XXXDeviceTypeXXX"
  in type and enumeration names.
* In the Resource Manager, changed "XXXRsrcPackageTypeXXX" to "XXXPackageTypeXXX"
  in type and enumeration names.
* Removed the Resource Manager AddRsrcRef(), DeleteRsrcRef() and 
  GetRefCount() functions.  Opening/Closing and Loading/Unloading resources
  does this work.
* Added a "blocking" parameter to the CResourceMPI constructor to explicitly
  set the interface for synchronous or asynchronous operation.  For Lighting,
  only synchronous/blocking operation is supported.  The constructor defaults
  to using synchronous mode.
* Modified the sample projects to use the new Resource Manager scheme, where
  resources are accessed by opening packages.
* Added CDebugMPI::EnableThrowOnAssert() to allow unit testing to test
  conditions that normally assert.
* Cleaned up unit test output by gating CDebugMPI::Assert() calls on whether
  EnableThrowOnAssert() is enabled.
  
Known Issues:
-------------
* Only 44.1K mono audio is supported.
* You can't change the volume of sound after the Play() call.
* You can't call NoteOn/Off while a MIDI file is playing.
* You can't play more than one MIDI file at a time.
* The Audio module doesn't properly support multiple MPI instances yet.
* Repeated emulation button events are generated when a button is held down
* Resource Manager URI searching is case-sensitive
* The packing tool is not yet in place and the sample projects are running
  off of the packer-generated (user unfriendly) file formats.
* The Resource Manager GetPackageSizeUnpacked, GetPackageSizePacked,
  LoadPackage, UnloadPackage, NewRsrc and DeleteRsrc member functions
  are not implemented.


===========================================
v0.1.6  (Build 456, released May 31, 2007) 
===========================================
Release for emulation target. Adds lots of new audio functionality.

Enhancements:
-------------
* Audio mixer implemented, currently 4 channels + MIDI.
* PlayAudio() uses the resource mgr to load and play audio.
* AudioIDs are returned, and audio done events are posted.
* Programmatic MIDI NoteOn and NoteOff calls are supported.
* PlayMIDIFile() will load and play a MIDI file using the default mobileer instruments.
* SetMasterVolume() now works for the output of the mixer.
* BrioCube demo now plays a soundfile when the 'a' key is pressed and
  plays a MIDI file when the 'b' key is pressed.
  
  See BrioCube demo and AudioMPI.h for new api and comments.
  
* Added KernelMPI Event and Timer functionality 
  
Known Issues:
-------------
* Only 44.1K mono audio is supported.
* You can't change the volume of sound after the Play() call.
* There are no Stop() functions for audio or MIDI yet.
* You can't call NoteOn/Off while a MIDI file is playing.
* You can't play more than one MIDI file at a time.
* The Audio module doesn't properly support multiple MPI instances yet.

===========================================
v0.1.5  (Build 407, released May 24, 2007) 
===========================================

Internal maintanence Release for emulation and embedded targets. Mainly fixes to
samples, headers, and build scripts for compatibility between emulation
and embedded target builds.

Enhancements:
-------------
* Display module supports 2D drawing via X window in emulation target.
* Font module does not crash if attempting to draw with unloaded font.

Known Issues:
-------------
* Audio module not connected to emulation platform libraries.

===========================================
v0.1.4  (Build 336, released May 18, 2007) 
===========================================

Release for emulation target with Audio module implementation.

===========================================
v0.1.3  (Build 321, released May 17, 2007) 
===========================================

Release only for target hardware, not emulation.

First release that runs on target hardware (MP2530F).  Note that this release
is meant to work with the following software components on the target
hardware:

* Linux Kernel Image: zImage-2.6.20.1-dev-00
* u-boot image: u-boot-svn183.bin
* root file system: nfsroot-svn321.tar.gz

The cross-compiler for building the embedded target binaries is:

* scratchbox-toolchain-arm-gcc4.1-uclibc20061004

Enhancements:
-------------
* 2D layer support via Display Manager.
* 3D layer and 3D accelerator support via BrioOpenGLConfig. 

Known Issues:
-------------
* Some Kernel Manager services need fixing, as seen in testKernel.
* Resource Manager services will not work until /LF/System directory tree
  is installed on root file system.
* Event handling in BrioCube demo is disabled in embedded target build
  due to Kernel and Resource manager problems.
* When specifying deploy_dir to scons in the examples, specify the absolute
  path to where you expect the executable to be installed.  For example:
  deploy_dir=/home/lfu/nfsroot/usr/local/bin.  However, if INSTALL_PREFIX is
  set in the environment, INSTALL_PREFIX/usr/local/bin will be the install
  destination.  Expect this to become cleaner in future releases.
* Whey you run the scons install target in the examples, only the program is
  installed; the resources (such as Verdana.ttf) are not installed.  They must
  be copied over manually.
* Currently, on the embedded target, the module manager and other components
  are not properly cleaned up if they crash.  This may be a problem with Brio,
  or it may be a problem with Linux.  So, if you use ctl-c to kill a Brio app,
  or if your Brio app crashes, you will probably have to reset the board.

===========================================
v0.1.2  (Build 154, released May 1, 2007) 
===========================================
Emulation only release

Enhancements:
-------------
* Massive improvements to the MPI interfaces, including:
   * Consistent error status scheme (accessors return values, not error codes,
     e.g., tErrType GetVersion(tVersion) -> tVersion GetVersion())
   * Consistent ordering of input/output parameters in function parameter lists
   * Consistent iteration scheme (FindFirstX()/FindNextX())
   * Const correct interfaces
   * Pass by reference whenever a parameter is not optional (e.g., 
     FindRsrc(CURI*) -> FindRsrc(const CURI&))
   * Framework for using C++ namespaces as documented in Brio spec is in place
   * Consistent variable naming scheme
   * Errors and event definitions are now decentralized
   * Consistently use zero values as invalid state
   * Reduction of repetitive parameters (e.g., DebugMPI ctor now takes 
     the signature parameter, which has been removed as the first
     parameter from all of the DebugOutXXX() functions)
   * Removed the repetitive GetMPIVersion() functions
   * Changed the tVersion type from major/minor scheme to a straight U16 value
   * Function names of form VerbNoun() (e.g., InitMutex() rather than MutexInit())
   * Simplified timer function interfaces to work with milliseconds only 
     rather than milliseconds and microseconds
* Display Manager initial implementation (mainly stubbed out)
* Font Manager initial implementation
* Resource Manager "M" functions (seek & write resource functions)
* Updated sample programs to use the improved MPI interfaces
* Updated the Simple sample to demonstrate use of the Font Manager interface
* Extended internal error reporting through the Debug module

Bug Fixes:
----------
* Default emulation window size is now 320x240 rather than 240x320

Known Issues:
-------------
* Repeated emulation button events are generated when a button is held down


===========================================
v0.1.1  (Build 1, released April 6, 2007)
===========================================
Initial release
Emulation only release

Implementations of the following Modules:
-----------------------------------------
* Kernel ("H" functions including Task creation, message queue, 
  memory allocation)
* Debug
* Audio (low level driver in place, StartAudio/StopAudio calls with 
  audio done events)
* Event Manager (all events handled at high priority)
* Button Manager
* Resource Manager ("H" functions for opening and loading resources)

