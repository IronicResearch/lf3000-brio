======================================================
Target Setup Notes
======================================================

The following target setup instructions were previously included in the SDK Readme.txt
file. They have been split off into this separate file for sake of clarity. Many of
these instructions need only be done once the first time a developer receives a
Lightning board with the SDK. 

======================================================
Lightning Target Board Requirements
======================================================

The Lightning board needs to be connected to the PC host development system with
the following cables:

	null-modem serial cable (for serial console)
	cross-over Ethernet cable (for TFTP transfers or NFS booting)
	USB Ethernet adapter (preferred over builtin host Ethernet)
	
It is recommended to use a USB Ethernet adapter for network communications with the
PC host development system and the Lightning target board. A LinkSys brand USB Ethernet
adapter is preferred over Belkin brand. (TFTP transfers in U-boot fail with Belkin.)

The PC host development system (Ubuntu Linux) should have the following packages
installed and running:

	TFTP server (for TFTP transfers)
	NFS server (for NFS booting)
	Scratchbox toolchain (for ARM cross-compiling)
	Eclipse IDE with CDT support (for C++ development)

These packages should already be included in the Ubuntu Linux distribution provided
provided by Leapfrog as VMWare image.

Additional packages which could be helpful:

	Minicom serial terminal (for serial console)
	Python serial package (for flashing firmware upgrades)
	
======================================================
Target Preparation -- setting up NFS
======================================================

You only need to do these steps if your development system hasn't already 
been configured for NFS.

**** VMWare Note ****:
It is recommended to use a USB Ethernet adapter for network communications with the
target board when running Linux under VMWare emulation. You only need to have
network communications while Linux is running. It is highly recommended that
VMWare and its Windows host *not* be aware the network adapter is even installed
in order to avoid IP address configuration problems.

Your development system image will need to have an NFS server installed
and running, and one network adapter configured at the fixed IP address
192.168.0.113. 

	$ sudo apt-get install nfs-user-server
	$ sudo /etc/init.d/nfs-user-server start
	
	$ sudo ifconfig eth1 192.168.0.113 up

The network IP address configuration should be put in a startup script. 
Note the development system used with Lightning testboard used 'xinetd' 
instead of 'inetd'.

	$ sudo apt-get install xinetd
	$ sudo /etc/init.d/xinetd start

The Lightning test board will be flashed with a Linux kernel image which 
will attempt to NFS mount its root filesystem at this IP address. The test 
board will be configured to use IP address 192.168.0.111, so this may need 
to be added to list of allowable addresses in /etc/hosts.allow if firewall
iptables service is running.

Configure the nfs server using your favorite text editor:

Add these lines to the end of the file /etc/hosts.allow:

	ALL: 192.168.0.111

Add these lines to the end of the file /etc/hosts.deny

	ALL: ALL

Add this line to the end of the file /etc/exports

	/home/lfu/nfsroot 192.168.0.111(rw,no_root_squash,async)

Now restart the the NFS server:

   $ sudo /etc/init.d/nfs-kernel-server restart

======================================================
Target Preparation -- setting up TFTP
======================================================

1. Install tftp and related packages.

	$ sudo apt-get install tftpd tftp


2. Create /etc/xinetd.d/tftp and put this entry:

	$ sudo vi /etc/xinetd.d/tftp
	
		service tftp
		{
		protocol    = udp
		port        = 69
		socket_type = dgram
		wait        = yes
		user        = lfu
		server      = /usr/sbin/in.tftpd
		server_args = /home/lfu/tftpboot
		disable     = no
		}

3. Make /home/lfu/tftpboot directory.

	$ mkdir -p /home/lfu/tftpboot
	$ chmod -R 777 /home/lfu/tftpboot
	
Note some previous release notes and wiki notes may have referred to 'tftproot' as
the TFTP server home directory. External software developers may continue to use
that name (or any other name) for their TFTP directory for consistancy. (Internal
firmware developers need to use 'tftpboot' for automated script support.) 


4. Ensure /etc/hosts.allow file allows computers on 192.168.0.0 network access.

	# /etc/hosts.allow: list of hosts that are allowed to access the system.
	#                   See the manual pages hosts_access(5), hosts_options(5)
	#                   and /usr/doc/netbase/portmapper.txt.gz
	#
	# Example:    ALL: LOCAL @some_netgroup
	#             ALL: .foobar.edu EXCEPT terminalserver.foobar.edu
	#
	# If you're going to protect the portmapper use the name "portmap" for the
	# daemon name. Remember that you can only use the keyword "ALL" and IP
	# addresses (NOT host or domain names) for the portmapper, as well as for
	# rpc.mountd (the NFS mount daemon). See portmap(8), rpc.mountd(8) and 
	# /usr/share/doc/portmap/portmapper.txt.gz for further information.
	#
	ALL:192.168.0.0/24
	

5. Start tftpd through xinetd

	$ sudo /etc/init.d/xinetd restart


6. Testing. Transferring file hda.txt to server

	$ cd ~lfu
	$ touch hda.txt
	$ tftp 192.168.0.113

	tftp> put hda.txt
	tftp> quit

	$ ls -l /home/lfu/tftpboot
	-rw------- 1 lfu lfu 0 2007-06-04 12:10 hda.txt


7. Troubleshooting. Check the /var/log/syslog file for tftp error messages.

	$ tail -f /var/log/syslog

======================================================
Target Preparation -- serial terminal program
======================================================

**** VMWare Note ****:
You will need to exit any Windows terminal programs (like HyperTerminal) in order for
Linux to acquire the serial port while running under VMWare emulation. You may also need
to explicitly enable VMWare's Serial COM1 port device (Settings > Hardware > Serial Port
menu selection, or Serial Port '0101' icon on toolbar).
 
This page describes using minicom, a popular serial port terminal application, in Linux. 
If needed, minicom can be installed in Ubuntu using apt:

	$ sudo apt-get install minicom

First, a note about serial ports. The fist real serial port ("com1") is named /dev/ttyS0 
and the second is /dev/ttyS1 and so on. If your serial port comes on a USB dongle, it's 
likely at /dev/ttyUSB0. Here were assume that your serial port is /dev/ttyS0.

You will need to configure minicom before using it for the first time. Run it with 'sudo' 
in configuration mode as follows:

	$ sudo minicom -s

Select "serial port setup" and in the setup screen set your port to /dev/ttyS0, set your 
baud rate (115200 8N1 is commonly used by Linux targets such as Lightning) and turn off 
Hardware Flow Control. Now enter the "modem and dialing" screen and delete all of the 
settings inside there. This will prevent minicom's attempts to send modem commands on 
init and exit to the target. Now save everything using the "Save as dfl" option. You can 
now exit Minicom by pressing control+a and then x.

Now you may run minicom normally. I suggest the following options:

	$ minicom -o -w -c on

The -w option enables line wrap (you can toggle it with "control+a w"), -o disables 
initialization (used for modems), and -c on turns on colors when talking to Linux targets. 
"control+a z" gets you to a help menu. Other useful options include "control+a L", which 
toggles logging to a text file (useful for capturing long debug output sessions, for example). 
"control+a x" can be used to exit minicom.

In Ubuntu, you can create a nice shortcut icon in a panel (ie: up top where the menus are) 
by right-clicking an empty space, choosing "add to panel" and adding a "custom application 
launcher". Pick a nice icon, name the launcher "minicom" and use the following for the command:

	gnome-terminal --title="minicom" -e "minicom -o -w -c on"

This creates an icon that runs minicom in a terminal, with the desired options.

======================================================
Target Preparation -- flashing kernel image manually
======================================================

With the network services up and running for the specific development system
IP address, you will also be able to use the U-boot loader installed on
the Lightning target board to download updated Linux kernel images.

You will need to have a serial console connected to interrupt the target
board's normal boot sequence and run U-boot commands. 

To boot up U-boot, hold down any button on the target board while pressing 
the RESET button. When the "U-boot" loader message appears, press any key
on the serial console to enter U-boot. Otherwise the board will continue
loading its pre-flashed Linux kernel.

At the U-boot prompt, test pinging the development system first.

	# ping 192.168.0.113
	
Then download the updated kernel images from its TFTP location on the
development system. On Ubuntu Linux, TFTP is typically configured
at the ~/tftpboot directory, so this is where the image files need to
be copied to. The image files provided in releases will typically have
some version number 'XXXX', which is something like '0.8.0-1888-ME_LF1000'.

**** Important Note ****:
Test transferring a file via TFTP. Problems have occurred with Belkin USB Ethernet
adapters during TFTP transfers. LinkSys adapters are preferred Ethernet devices
for use in U-boot.

	# tftp 02000000 lightning-boot-XXXX.bin 

In this release, all new binaries need to be flashed, and it is advisable
to erase all flash memory first.

	# nand erase
	
If you are just updating one component like the kernel image, you could
skip the previous step but will need to erase the corresponding region
with explicit 'nand erase clean <address> <size>' commands below.

To download and flash the new boot loader:

	# tftp 02000000 lightning-boot-XXXX.bin
	# nand erase clean 0 2000
	# nand write 02000000 0 2000
	
To download and flash the new kernel image:

	# tftp 02000000 kernel-XXXX.jffs2
	# nand erase clean 00200000 180000
	# nand erase clean 01200000 180000
	# nand write 02000000 00200000 180000
	# nand write 02000000 01200000 180000

To download and flash the new embedded root filesystem image:

	# tftp 02000000 erootfs-XXXX.jffs2
	# nand write 02000000 00400000 680000
	# nand write 02000000 01400000 680000

Once all components are flashed, reboot the system by pressing the RESET
button. You should see Linux boot messages on the serial console when
flashing was successful.

**** LF1000 Development Board Note ****:
If you are updating an LF1000 development board from firmware version earlier
than 0.8.0, make sure that Ethernet jumper J31 is moved to CS2 before rebooting.

======================================================
Target Preparation -- flashing kernel image via script
======================================================

A Python script is provided for automating the U-boot commands externally from the
development system side. You will need the Python serial package installed on your
development system.

	$ sudo apt-get install python-serial

You will also need a copy of the Python script in the same TFTP directory as
the firmware binaries (to simplify file paths).

	$ cp host_tools/lightning_install.py ~/tftpboot 

Reboot the embedded target board to the U-boot prompt as above. That is, hold one of
the buttons down when powering on or pressing the RESET button. Then instead of
entering the U-boot commands manually, close the serial terminal and run the
following script from the development system.

	$ cd ~/tftpboot
	$ ./lightning_install.py /dev/ttyS0 -e lightning-boot-XXXX.bin:0 \ 
			kernel-XXXX.jffs2:200000 erootfs-XXXX.jffs2:400000 \
			kernel-XXXX.jffs2:1200000 erootfs-XXXX.jffs2:1400000 

'XXXX' refers to the version number of the release, such as '0.8.0-1888-ME_LF1000'
for the LF1000 green development board, or '0.8.0-1888-LF_LF1000' for the LF1000
form-factor board.

The '-e' option is recommended in this release to erase all flash memory.

This script will update all 3 major firmware components, including the boot loader,
the Linux kernel image (with U-boot), and the embedded root filesystem. All of these
components have changed significantly since previous releases, including their names
and (more importantly) their locations! 

If for some reason you only wish to update one component at a time, the above
script could be executed in these smaller steps.

	$ ./lightning_install.py /dev/ttyS0 -e lightning-boot-XXXX.bin:0
	$ ./lightning_install.py /dev/ttyS0 kernel-XXXX.jffs2:200000 
	$ ./lightning_install.py /dev/ttyS0 erootfs-XXXX.jffs2:400000
	$ ./lightning_install.py /dev/ttyS0 kernel-XXXX.jffs2:1200000 
	$ ./lightning_install.py /dev/ttyS0 erootfs-XXXX.jffs2:1400000 

Note that the '-e' option to erase all memory should only be executed in the
first step in this case.
 
**** LF1000 Development Board Note ****:
If you are updating an LF1000 development board from firmware version earlier
than 0.8.0, make sure that Ethernet jumper J31 is moved to CS2 before rebooting.

======================================================
Target Preparation -- flashing kernel via cartridge
======================================================

Developers who received a manufacturing cartridge from LeapFrog will be able to
update the firmware on their target boards simply by loading the cartridge.

This is the only method to flash new LF1000 Form-Factor boards. This method can
also be used to flash LF1000 development boards by changing certain jumpers.  

On the LF1000 Form-Factor units:

	1. Make sure power is off.
	2. Insert the manufacturing cartridge on top of the unit.
	3. Turn on power to the form-factor unit.
	4. Wait for the "OK" bitmap to indicate flashing is complete.
	5. Turn off the power before removing the cartridge.
	
On the LF1000 development boards:

	1. Make sure power is off.
	2. Insert the manufacturing cartridge on the J15 header pins.
		The cartridge will be oriented away from the development board
		when connected properly. Pin 1 is labeled on both boards.
	3. Change the following jumpers (nearby connector)
		a. Change jumper J16 (NAND) to CS1.
		b. Change jumper J13 (LCART) to CS0.
	4. Turn on power to the form-factor unit.
	5. Wait for the "OK" bitmap to indicate flashing is complete.
	6. Turn off the power before removing the cartridge.
	7. Restore jumpers to their previous settings:
		a. Change jumper J16 (NAND) to CS0.
		b. Change jumper J13 (LCART) to CS1.
	8. Make sure Ethernet jumper J31 (ETHER_CS) is set to CS2.
	9. Power back on and reboot.
	
Repeat the procedure with the manufacturing cartridge for any other LF1000 boards
which need updating.

Note that a single manufacturing cartridge is pre-programmed for either an LF1000
form-factor board or development board. The same cartridge cannot be used for both!

======================================================
Target Preparation -- flashing kernel via backdoor script
======================================================

In anticipation of future firmware updates to be downloaded over USB by the PC host
app software, a special backdoor script is now available for flashing firmware
updates in the LeapFrog .lfp package format.

This script requires that the LF1000 board be able to connect over USB, and then 
replace the default AppManager program expected to launch on normal bootups.

Connect the USB cable to the LF1000 target board and let it mount /Didj. If the
device was previously set to be unlocked, /Didj should appear automatically after
connecting. Otherwise use the following commands to mount /Didj manually.

	(target) # usbctl -d mass_storage -a enable
	(target) # usbctl -d mass_storage -a unlock
	
Copy the following firmware files to the /Didj directory from the host.

	(host) $ cp bootstrap-ME_LF1000-0.10.0.2101.lfp /media/Didj
	(host) $ cp firmware-ME_LF1000-0.10.0.2101.lfp /media/Didj
	(host) $ cp bootloader.backdoor /media/Didj
	(host) $ cp firmware.backdoor /media/Didj
	(host) $ cp top-secret-backdoor-launcher /media/Didj
	
Rename the default AppManager program and replace it with the backdoor launcher
script.

	(target) # cd /Didj/Base/bin
	(target) # mv AppManager AppManager.bak
	(target) # mv /Didj/top-secret-backdoor-launcher AppManager		

Safely unmount (eject) /Didj from the host and unplug the USB cable. This will launch
the script to update the firmware, and then shutdown the device when completed. This
might take a few minutes to complete.

Plug the USB cable back in and power the device back on. This should make the /Didj
drive reappear on the host. The launcher will have left a logfile, 'backdoor.results',
which can be viewed with a text editor if necessary. Delete this file, and all the 
backdoor packages files installed above.

	(host) $ rm *.lfp
	(host) $ rm *.backdoor
	
Finally restore the AppManager to its previous location.

	(host) $ cd /Didj/Base/bin
	(host) $ rm AppManager
	(host) $ mv AppManager.bak AppManager
	
Safely unmount /Didj and disconnect the USB cable again. This should relaunch the
original AppManager as the default app.
 
======================================================
Target Preparation -- installing ARM cross-compiler
======================================================

Your development system image will also need to have the cross-compiler
installed for building ARM binary targets. The version used to date is
scratchbox toolchain is based on GCC 4.1 with uclib run-time library. 

You will need root privileges for this part of the Scratchbox installation.

   1. Add the line below to the /etc/apt/sources.list file:	    
   
		deb http://scratchbox.org/debian ../download/files/sbox-releases/stable/deb
 
   		(convenient way to edit file: sudo gedit /etc/apt/sources.list) 

   2. Update the package list with command:

      $ sudo apt-get update

   3. Install packages:

      $ sudo apt-get install scratchbox-core scratchbox-libs
      $ sudo apt-get install scratchbox-toolchain-arm-gcc4.1-uclibc20061004
      $ sudo /scratchbox/sbin/sbox_adduser <yourusername>

Note you may need to modify the CC compiler directive in the arm-g++.py
script to use the explicit full path to arm-linux-g++. Or put this line
in your .bashrc script:

	export PATH=$PATH:/scratchbox/compilers/arm-gcc4.1-uclibc20061004/bin/

See ReleaseNotes.txt for important information about which versions of other
software components are required on the target.

